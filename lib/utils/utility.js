import http from "http";import crypto from "node:crypto";export const appDir = process.env.PWD;const jwtKey = hash(process.env.JWT_KEY)const jwtIV = process.env.JWT_IVexport function formatIpAddress(address) {    if (typeof address === "string")        return address.startsWith("::ff" + "ff:") ? address.slice(7) : address;    else        return "Unknown IP";}export function setErrorResponse(req, res, err) {    console.error("Processing request '%s %s' from '%s' failed:", req.method || "Unknown", req.originalUrl || "request", formatIpAddress(req.ip), err.message || err);    res.status(403).end();}export function setResponseCode(req, res, code) {    console.error("Request '%s %s' from '%s' failed. Status Code: %d (%s)", req.method || "Unknown", req.originalUrl || "request", formatIpAddress(req.ip), code, http.STATUS_CODES[code]);    res.status(code).end();    if (code === 400)        console.debug(req.body);}export function hash(message) {    return crypto.createHash("md5")        .update(Buffer.from(message, "ascii"))        .digest("hex");}export function encrypt(payload) {    const cipher = crypto.createCipheriv("AES-256-CBC", jwtKey, jwtIV);    let message = cipher.update(payload, "ascii", "hex");    message += cipher.final("hex");    return message;}export function decrypt(message) {    const decipher = crypto.createDecipheriv("AES-256-CBC", jwtKey, jwtIV);    let payload = decipher.update(message, "hex", "ascii");    payload += decipher.final("ascii");    return payload;}