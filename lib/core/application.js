import dotenv from 'dotenv';import db from '../data/db.js'import axios from "axios";import {ObjectId} from "mongodb";dotenv.config();const application = {    /**     * Add new Outlook email if it doesn't exist     * @param accessToken {String}     * @param refreshToken {String}     * @param aud {String}     * @param name {String}     * @param email {String}     * @param oid {String}     * @param tid {String}     * @param nonce {String}     * @returns {Promise<Object>}     */    azureLogin: (accessToken, refreshToken, aud, name, email, oid, tid, nonce) => {        return db.user.addUser('azure', accessToken, refreshToken, aud, email, name, {oid, tid, nonce})    },    /**     * Sync client emails     * @param user {String}     * @param accessToken {String}     * @returns {Promise<Array>}     */    syncMails: (user, accessToken) => {        return new Promise((resolve, reject) => {            return axios.get('https://graph.microsoft.com/v1.0/me/messages', {                headers: {                    Authorization: `Bearer ${accessToken}`                }            })                .then(response => {                    let mails = response.data.value.map(m => {                        return {                            owner: new ObjectId(user),                            emailID: m.id,                            subject: m.subject,                            sender: {name: m.sender.emailAddress.name, email: m.sender.emailAddress.address},                            receivedAt: new Date(m.receivedDateTime),                            status: m.isRead ? 1 : 0,                            body: m.body                        }                    })                    return db.mail.insertManyEmails(mails)                })                .then(() => db.user.updateOne(new ObjectId(user), {lastSync: new Date}))                .then(() => resolve(true))                .catch(err => {                    reject(err)                })        })    },    /**     * Get user info by user id     * @param _id {String}     */    getUserInfo: (_id) => {        return db.user.getUser(_id, {email: 1, accessToken: 1, refreshToken: 1})    }}export default application