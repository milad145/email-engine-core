import dotenv from 'dotenv';import "isomorphic-fetch";import db from '../data/db.js'import {decrypt, encrypt} from "../utils/utility.js";import axios from "axios";dotenv.config();const clientId = process.env.AZURE_AD_CLIENT_ID;const clientSecret = process.env.AZURE_AD_CLIENT_SECRET;const tenantId = process.env.AZURE_AD_TENANT_ID;const redirectUri = process.env.AZURE_REDIRECT_URI;const scopes = ["https://graph.microsoft.com/.default"];const application = {    /**     * Add new Outlook email if it doesn't exist     * @param accessToken {String}     * @param refreshToken {String}     * @param aud {String}     * @param name {String}     * @param email {String}     * @param oid {String}     * @param tid {String}     * @param nonce {String}     * @returns {Promise<Object>}     */    azureLogin: (accessToken, refreshToken, aud, name, email, oid, tid, nonce) => {        return db.user.addUser('azure', accessToken, refreshToken, aud, email, name, {oid, tid, nonce})    },    /**     * Return client emails     * @param accessToken {String}     * @returns {Promise<Array>}     */    getMails: (accessToken) => {        return axios.get('https://graph.microsoft.com/v1.0/me/messages', {            headers: {                Authorization: `Bearer ${accessToken}`            }        })            .then(response => response.data)    },    /**     * Get user info by user id     * @param _id {String}     */    getUserInfo: (_id) => {        return db.user.getUser(_id, {email: 1, accessToken: 1, refreshToken: 1})    }}export default application