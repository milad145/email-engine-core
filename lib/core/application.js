import {ObjectId} from 'mongodb';import dotenv from 'dotenv';dotenv.config();import {Client} from "@microsoft/microsoft-graph-client";import {PublicClientApplication, ConfidentialClientApplication} from "@azure/msal-node";import db from '../data/db.js';import {setResponseCode} from "../utils/utility.js";const clientId = process.env.AZURE_AD_CLIENT_ID;const clientSecret = process.env.AZURE_AD_CLIENT_SECRET;const tenantId = process.env.AZURE_AD_TENANT_ID;const redirectUri = process.env.AZURE_REDIRECT_URI;const scopes = ["https://graph.microsoft.com/.default"];const msalConfig = {    auth: {        clientId,        authority: `https://login.microsoftonline.com/${tenantId}`,        clientSecret // Ensure this is set    },    system: {        loggerOptions: {            loggerCallback(loglevel, message, containsPii) {                console.log(message);            },            piiLoggingEnabled: false,            logLevel: 'Info'        }    }};const pca = new PublicClientApplication(msalConfig);const ccaConfig = {    auth: {        clientId,        authority: `https://login.microsoftonline.com/${tenantId}`,        clientSecret    }};const cca = new ConfidentialClientApplication(ccaConfig)const application = {    /**     * User Authentication     * @returns {Promise<string>}     */    login: () => {        const authCodeUrlParameters = {            scopes:['openid', 'profile', 'email', 'Mail.Read'],            redirectUri        };        return pca.getAuthCodeUrl(authCodeUrlParameters)            .then(response => response)    },    /**     * Get user-specific access token     * @param code {String}     * @returns {Promise<String>}     */    azureOAuthRedirection: (code) => {        const tokenRequest = {            code: code,            scopes:['openid', 'profile', 'email', 'Mail.Read'],            redirectUri        };        return pca.acquireTokenByCode(tokenRequest)            .then(response => response.accessToken)    },    /**     * Get client-specific access token     * @returns {Promise<String>}     */    azureClientAccessToken: () => {        const tokenRequest = {            scopes,            clientSecret: clientSecret        }        return cca.acquireTokenByClientCredential(tokenRequest)            .then(response => response.accessToken)    },    /**     * Return client emails     * @param num {Number}     * @param userAccessToken {String}     * @returns {Promise<Array>}     */    getMails: (num, userAccessToken) => {        const client = Client.init({            authProvider: (done) => {                done(null, userAccessToken);            }        });        return client.api('/me/messages').get()            // return client.api("/me/messages").top(num).get()            .then(messages => messages)    }}export default application