import {ObjectId} from 'mongodb';import dotenv from 'dotenv';dotenv.config();import {Client} from "@microsoft/microsoft-graph-client";import {PublicClientApplication, ConfidentialClientApplication} from "@azure/msal-node";import db from '../data/db.js';import {setResponseCode} from "../utils/utility.js";let clientId, clientSecret, tenantId, redirectUri, scopes, msalConfig, pca, ccaConfig, cca;clientId = process.env.AZURE_AD_CLIENT_ID;clientSecret = process.env.AZURE_AD_CLIENT_SECRET;tenantId = process.env.AZURE_AD_TENANT_ID;redirectUri = "http://localhost:3000/azure-callback";scopes = ["https://graph.microsoft.com/.default"];msalConfig = {    auth: {        clientId,        authority: `https://login.microsoftonline.com/${tenantId}`,        clientSecret, // Ensure this is set    },    system: {        loggerOptions: {            loggerCallback(loglevel, message, containsPii) {                console.log(message);            },            piiLoggingEnabled: false,            logLevel: 'Info',        },    },};pca = new PublicClientApplication(msalConfig);ccaConfig = {    auth: {        clientId,        authority: `https://login.microsoftonline.com/${tenantId}`,        clientSecret,    },};cca = new ConfidentialClientApplication(ccaConfig)const application = {    /**     * User Authentication     * @returns {Promise<string>}     */    login: () => {        return new Promise((resolve, reject) => {            const authCodeUrlParameters = {                scopes,                redirectUri,            };            pca.getAuthCodeUrl(authCodeUrlParameters)                .then(response => {                    resolve(response);                })                .catch(err => reject(err))        })    },    /**     * Get user-specific access token     * @param code {String}     * @returns {Promise<String>}     */    azureOAuthRedirection: (code) => {        return new Promise((resolve, reject) => {            const tokenRequest = {                code: code,                scopes,                redirectUri            };            pca.acquireTokenByCode(tokenRequest)                .then(response => {                    // Store the user-specific access token in the session for future use                    resolve(response.accessToken)                })                .catch(err => reject(err));        })    },    /**     * Get client-specific access token     * @returns {Promise<String>}     */    azureClientAccessToken: () => {        return new Promise((resolve, reject) => {            const tokenRequest = {                scopes,                clientSecret: clientSecret,            }            cca.acquireTokenByClientCredential(tokenRequest)                .then(response => resolve(response.accessToken))                .catch(err => reject(err))        })    },    getMails: (num, userAccessToken) => {        return new Promise((resolve, reject) => {            const client = Client.init({                authProvider: (done) => {                    done(null, userAccessToken);                },            });            client.api("/me/messages").top(num).get()                .then(messages => resolve(messages))                .catch(err => reject(err))        })    }}export default application