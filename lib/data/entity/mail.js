/*mongoose.mail('mail', new mongoose.Schema({    owner : ObjectId,    emailID : String,    subject : String,    sender : Object,    received_at : Date,    status : Number,    body : String,}));*/import {ObjectId} from "mongodb";export default class Mail {    constructor(db) {        this._mail = db.collection('mail');    }    init() {        return this._mail.createIndexes([            {key: {receivedAt: -1}},            {key: {emailID: 1}, unique: true}        ])    }    /**     *     * @param docs {Array<     *                  Object<     *                      owner:String,     *                      emailID:String,     *                      subject:String,     *                      sender:Object<     *                          name:String,     *                          email:String     *                          >,     *                      receivedAt:Date,     *                      status:<0,1>,     *                      body:String     *                      >     *                  >}     * @returns {Promise<any>}     */    insertManyEmails(docs) {        return this._mail.insertMany(docs)    }    /**     * sync Mail     * @param owner {ObjectId}     * @param emailID {String}     * @param subject {String}     * @param sender {Object <name:String,emails:String>}     * @param receivedAt {Date}     * @param status {Number}     * @param body {String}     * @param folder {String}     * @returns {*}     */    syncMail(owner, emailID, subject, sender, receivedAt, status, body, folder) {        return this._mail.findOneAndUpdate({owner, emailID}, {            $set: {                subject,                sender,                receivedAt,                status,                body,                folder            }        }, {upsert: true})    }    /**     * Get Mail by _id     * @param owner {ObjectId}     * @param folder {String}     * @param projection {Object}     * @returns {Promise<Object>}     */    getUserMails(owner, folder, projection) {        let query = {owner}        if (folder !== 'all')            query.folder = folder;        return this._mail.find(query, {projection,sort:{receivedAt:-1}}).toArray()    }}