import http from 'http';import path from "path";import express from "express";import session from "express-session";import connectMongo from "connect-mongo";import cluster from "cluster";import os from "os";import passport from 'passport';import initializePassport from "./core/passport.js";import db from "./data/db.js";import {appDir} from "./utils/utility.js";import viewer from "./routes/view.js";import {exception, unhandled} from "./routes/error.js";export default function () {    if (typeof process.env.DB_CONFIG !== "string")        return console.error("Database connection string config is missing!");    else        start();};function start() {    db.connect(process.env.DB_CONFIG, function (err) {        if (err) {            console.error("Database connection failed:", err);            setTimeout(() => start(), 10000);        } else {            const numCPUs = os.cpus().length;            if (cluster.isMaster) {                console.log(`Master process ${process.pid} is running`);                for (let i = 0; i < numCPUs; i++) {                    cluster.fork();                }                cluster.on('exit', (worker, code, signal) => {                    console.log(`Worker process ${worker.process.pid} died. Restarting...`);                    cluster.fork();                });            } else {                initExpress();            }        }    });}function initExpress() {    const app = express();    app.disable("x-powered-by");    app.set("view engine", "ejs");    app.use('/css', express.static(path.join(appDir,  'views', 'css')));    app.use('/fonts', express.static(path.join(appDir,  'views', 'css','fonts')));    app.use('/images', express.static(path.join(appDir,  'views', 'images')));    app.use('/media', express.static(path.join(appDir,  'views', 'media')));    app.use('/js', express.static(path.join(appDir,  'views', 'js')));    app.use('/tmpl', express.static(path.join(appDir,  'views', 'tmpl')));    app.use(express.text());    app.use(express.json({limit: "2.0mb", extended: true}));    app.use(express.urlencoded({limit: "0.4mb", extended: true}));    app.use(session({        name: "session",        cookie: {secure: false, maxAge: Date.parse("2000-01-02T00:15:00Z")},        secret: "g9Sp+pKeOR64lDXf1",        resave: true,        rolling: true,        saveUninitialized: true,        store: connectMongo.create({mongoUrl: process.env.DB_CONFIG})    }));    initializePassport(passport)    app.use(passport.initialize())    app.use(passport.session())    // main routes    app.use(viewer);    // error handler routes    app.use(unhandled);    app.use(exception);    let server = http.createServer({}, app);    let port = parseInt(process.env.SERVER_PORT) | 3000;    server.listen(port, function (err) {        if (!err) {            console.log('Express HTTPS server listening on port %d!', port)        }    }).on('error', function (err) {        console.error("HTTPS server error:", err.message);        process.exit(1);    })}