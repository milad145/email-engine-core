import express from "express"import application from "../core/application.js";import {isLogin} from "../core/middleware.js"import {setResponseCode, setErrorResponse, decrypt} from "../utils/utility.js";import passport from "passport";let router = express.Router();//*********************** POST ***********************//router.post('/api/webhook', (req, res) => {    const {userId} = req.body.value[0];    return application.syncSubscription(userId)        .then(() => res.send(true))        .catch(err => setErrorResponse(req, res, err))});//*********************** GET ***********************//router.get("/", isLogin, (req, res) => {    res.redirect('/profile')});router.get("/login", (req, res) => {    res.render('login')});router.get("/login-azure", passport.authenticate('azuread-openidconnect'));router.get("/azure-callback", passport.authenticate('azuread-openidconnect', {failureRedirect: '/'}),    (req, res) => {        res.redirect('/');    });router.get("/login-facebook", passport.authenticate("facebook"))router.get("/facebook-callback", passport.authenticate("facebook"), (req, res) => {    res.redirect("/")})router.get("/login-google", passport.authenticate("google"))router.get("/google-callback", passport.authenticate("google"), (req, res) => {    res.redirect("/")})router.get("/sync-mails", isLogin, function (req, res) {    let {user} = req.session.passport;    application.syncMails(user._id, decrypt(user.accessToken))        .then(() => res.send(true))        .catch(err => setErrorResponse(req, res, err))})router.get('/profile', isLogin, (req, res) => {    let {user} = req.session.passport;    return application.getProfileData(user._id)        .then(user => res.render('profile', {user}))        .catch(err => setErrorResponse(req, res, err))})router.get('/mails/:folder', isLogin, (req, res) => {    let {user} = req.session.passport;    let {folder} = req.params    if (typeof folder === "string" && folder.length) {        return application.getUserMails(user._id, folder)            .then(mails => res.render('mails', {mails}))            .catch(err => setErrorResponse(req, res, err))    } else        setResponseCode(req, res, 404)})router.get('/mails', isLogin, (req, res) => {    let {user} = req.session.passport;        return application.getUserMails(user._id, 'all')            .then(mails => res.render('mails', {mails}))            .catch(err => setErrorResponse(req, res, err))})export default router;